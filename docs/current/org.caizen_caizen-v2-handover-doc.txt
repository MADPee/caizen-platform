# CaiZen v2.0 - Developer Handover Document
*Skapad: 2025-05-30*
*Version: 2.0*
*Utvecklare: [Ditt namn]*

---

## 📋 Syfte med detta dokument

Detta handover-dokument beskriver den nya Privacy-First Unified Dashboard som utvecklats för CaiZen v2.0. Dokumentet är skrivet för nästa utvecklare som ska fortsätta arbetet med att implementera och vidareutveckla plattformen.

---

## 🎯 Projektkontext och Vision

### Fundamental Transformation
CaiZen har genomgått en **paradigmskifte** från v1.0 till v2.0:

| Aspekt | v1.0 | v2.0 |
|--------|------|------|
| **Dataägare** | Användaren | Fordonet (VIN-baserat) |
| **Vid ägarskifte** | Data försvinner | Historik följer bilen |
| **Privacy** | Efterkonstruktion | Privacy by Design |
| **Unikhet** | Standard fordonslogg | Omöjligt att läcka persondata |

### Kärnvärdeproposition
**"Bilens egen minnesbok med omöjlig persondata-läckage"**

Användare är **custodians** (vårdnadshavare) av fordonets historia, inte ägare av data.

---

## 🏗️ Dashboard Arkitektur

### Komponentstruktur

```
CaizenV2Dashboard (Root Component)
├── State Management
│   ├── privacyMode: 'masked' | 'visible' | 'full'
│   ├── activeView: string
│   └── showGDPRInfo: boolean
│
├── Privacy Utilities
│   ├── maskVIN(vin): Maskerar VIN-nummer
│   ├── maskReg(reg): Maskerar registreringsnummer
│   └── maskStation(station): Maskerar stationsnamn
│
├── Data Models
│   ├── vehicleData (Permanent, VIN-följande)
│   ├── personalData (Krypterad, GDPR-raderbar)
│   └── latestRefuel (Blandat - separeras automatiskt)
│
└── UI Components
    ├── Header (med privacy controls)
    ├── GDPRInfoModal
    ├── PrivacyBadge (återanvändbar komponent)
    ├── VehicleIdentityCard
    ├── LatestRefuelingCard (Mixed Data)
    ├── ConsumptionAnalysisCard (Vehicle Data)
    ├── EnvironmentalImpactCard (Vehicle Data)
    ├── FuelHistoryTable (Vehicle Data)
    └── PrivacyFooter
```

---

## 🎨 Design System och Principer

### Färgkodning (KRITISKT för v2.0)

```css
/* Privacy Color System */
--privacy-personal: #ef4444;    /* Röd - Persondata */
--privacy-vehicle: #22c55e;     /* Grön - Fordonsdata */
--privacy-mixed: #eab308;       /* Gul - Blandat */

/* Brand Colors (från v1.0) */
--caizen-blue: #0066B1;
--caizen-orange: #FF7700;
--caizen-purple: #6F2B90;
--caizen-red: #FF0000;
```

### Visuella Indikatorer

1. **Border Colors på Cards**
   - `border-l-4 border-green-500` = Fordonsdata
   - `border-l-4 border-red-500` = Persondata (ej implementerad än)
   - `border-l-4 border-yellow-500` = Blandat

2. **PrivacyBadge Component**
   ```tsx
   <PrivacyBadge type="personal" />  // Röd badge med Lock-ikon
   <PrivacyBadge type="vehicle" />   // Grön badge med Shield-ikon
   <PrivacyBadge type="mixed" />     // Gul badge med AlertCircle-ikon
   ```

3. **Font Choices**
   - Headers: Sans-serif (TailwindCSS default)
   - Data/Numbers: `font-mono` för precision
   - Body: Regular sans-serif

### UX-filosofi
**"Verksamhet utan att synas"** - säkerhet ska kännas naturlig, inte påträngande.

---

## 🔐 Privacy-First Implementation

### Tre Privacy-Lägen

```typescript
type PrivacyMode = 'masked' | 'visible' | 'full';

const [privacyMode, setPrivacyMode] = useState<PrivacyMode>('masked');
```

**Beteenden:**

| Läge | VIN | Reg | Station | Kostnad | Betalning |
|------|-----|-----|---------|---------|-----------|
| **masked** | `WBA***4424` | `MKN***` | `Preem ***` | Dold | Dold |
| **visible** | `WBA***4424` | `MKN***` | `Preem Haninge...` | Dold | Dold |
| **full** | `WBA2D3...4424` | `MKN510` | `Preem Haninge Vendelsövägen` | Synlig | Synlig |

### Maskerings-Utilities

```typescript
// Implementering av maskering
const maskVIN = (vin: string): string => {
  if (privacyMode === 'full') return vin;
  return `${vin.slice(0, 3)}***********${vin.slice(-4)}`;
};

const maskReg = (reg: string): string => {
  if (privacyMode === 'full') return reg;
  return `${reg.slice(0, 3)}***`;
};

const maskStation = (station: string): string => {
  if (privacyMode === 'masked') return station.split(' ')[0] + ' ***';
  return station;
};
```

**VIKTIGT:** I produktionsmiljö måste `full`-läget kräva:
- ✅ Användarautentisering
- ✅ Explicit användarförfrågan
- ✅ Audit logging
- ✅ Session timeout

---

## 📊 Datamodeller och Separering

### Fordonsdata (Permanent)

```typescript
interface VehicleData {
  vin: string;                    // Primär identifierare
  registration: string;           // Kan ändras, men följer fordonet
  model: string;
  color: string;
  inspectionHistory: Array<{
    date: string;
    status: string;
    odometer: number;
    nextDue: string;
  }>;
  environmentalData: {
    co2: number;
    co2Limit: number;
    hc: number;
    hcLimit: number;
    lambda: number;
    lambdaRange: [number, number];
  };
  fuelHistory: Array<{
    date: string;                 // Datum är fordonsdata
    amount: number;               // Mängd är fordonsdata
    odometer: number;             // Mätarställning är fordonsdata
    distance: number;             // Körsträcka är fordonsdata
    consumption: number;          // Förbrukning är fordonsdata
  }>;
}
```

**Lagring:** `vehicle_permanent` schema i Supabase
**Retention:** Permanent (följer VIN)
**GDPR:** Kan ej raderas (är anonymt)

### Persondata (Temporär, Krypterad)

```typescript
interface PersonalData {
  owner: string;                  // Ägarens namn (krypterat)
  ownershipStart: string;         // När ägandet började
  preferences: {
    notifications: boolean;
    dataSharing: boolean;
  };
}

interface RefuelingPersonalData {
  station: string;                // Stationsnamn med adress
  cost: number;                   // Total kostnad i SEK
  paymentMethod: string;          // Betalningsmetod (maskerad)
}
```

**Lagring:** `personal_encrypted` schema i Supabase
**Retention:** 7 år (eller när användaren begär radering)
**GDPR:** Kan raderas när som helst
**Kryptering:** AES-256

### Blandat Data (Separeras vid inläsning)

Exempel: Tankningskvitto innehåller både fordons- och persondata

```typescript
// Smart OCR Parser separerar automatiskt:
const rawReceiptData = {
  station: "Preem Haninge Vendelsövägen",  // PERSONDATA
  date: "2025-04-18",                       // FORDONSDATA
  time: "13:17:51",                         // FORDONSDATA
  amount: 35.44,                            // FORDONSDATA
  pricePerLiter: 15.49,                     // FORDONSDATA (neutral)
  totalCost: 548.97,                        // PERSONDATA
  paymentMethod: "Mastercard ***3052"       // PERSONDATA
};

// Efter separering:
vehicleData.fuelHistory.push({
  date: rawReceiptData.date,
  amount: rawReceiptData.amount,
  // ... andra fordonsdata
});

personalData.payments.push({
  date: rawReceiptData.date,
  cost: rawReceiptData.totalCost,
  method: rawReceiptData.paymentMethod
});
```

---

## 🛠️ Tekniska Implementationsdetaljer

### State Management

Nuvarande implementation använder `useState` hooks för enkelhetens skull i prototypen.

**För produktion - rekommendation:**
```typescript
// Använd Redux Toolkit eller Zustand för global state
import { create } from 'zustand';

interface AppState {
  privacyMode: PrivacyMode;
  setPrivacyMode: (mode: PrivacyMode) => void;
  
  vehicleData: VehicleData | null;
  personalData: PersonalData | null;
  
  fetchVehicleData: (vin: string) => Promise<void>;
  // ... mer state management
}

const useAppStore = create<AppState>((set, get) => ({
  privacyMode: 'masked',
  setPrivacyMode: (mode) => set({ privacyMode: mode }),
  // ... implementering
}));
```

### Component Återanvändning

**PrivacyBadge** är designad för återanvändning:

```tsx
const PrivacyBadge = ({ type }: { type: 'personal' | 'vehicle' | 'mixed' }) => {
  const configs = {
    personal: { 
      bg: 'bg-red-900/20', 
      border: 'border-red-500', 
      text: 'text-red-400', 
      icon: Lock,
      label: 'Persondata'
    },
    vehicle: { 
      bg: 'bg-green-900/20', 
      border: 'border-green-500', 
      text: 'text-green-400', 
      icon: Shield,
      label: 'Fordonsdata'
    },
    mixed: { 
      bg: 'bg-yellow-900/20', 
      border: 'border-yellow-500', 
      text: 'text-yellow-400', 
      icon: AlertCircle,
      label: 'Blandat'
    }
  };
  
  const config = configs[type];
  const Icon = config.icon;
  
  return (
    <div className={`inline-flex items-center px-2 py-1 rounded text-xs ${config.bg} ${config.border} border ${config.text}`}>
      <Icon size={12} className="mr-1" />
      {config.label}
    </div>
  );
};
```

**Användning:**
```tsx
<h3>Senaste tankningen <PrivacyBadge type="mixed" /></h3>
<h3>Förbrukningsanalys <PrivacyBadge type="vehicle" /></h3>
```

### Responsivitet

Dashboard använder Tailwind's responsive utilities:

```tsx
// Grid breakpoints
<div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
  {/* Cards... */}
</div>

// Flex wrapping
<div className="flex flex-col md:flex-row items-center">
  {/* Content... */}
</div>
```

**Testade breakpoints:**
- Mobile: < 640px
- Tablet: 640px - 1024px
- Desktop: > 1024px

---

## 🔄 Integration med Backend (Nästa steg)

### API Endpoints som behövs

```typescript
// Vehicle Data API
GET /api/vehicles/{vin}
GET /api/vehicles/{vin}/fuel-history
GET /api/vehicles/{vin}/inspections
POST /api/vehicles/{vin}/fuel-log

// Personal Data API (kräver autentisering)
GET /api/users/me/vehicles
GET /api/users/me/payments
DELETE /api/users/me (GDPR deletion)

// Mixed Data Processing
POST /api/ocr/process-receipt (separerar automatiskt)
```

### Supabase Schema (Förslag)

```sql
-- Vehicle Permanent Schema
CREATE SCHEMA vehicle_permanent;

CREATE TABLE vehicle_permanent.vehicles (
  vin VARCHAR(17) PRIMARY KEY,
  registration VARCHAR(10),
  model VARCHAR(100),
  color VARCHAR(50),
  created_at TIMESTAMPTZ DEFAULT NOW()
);

CREATE TABLE vehicle_permanent.fuel_logs (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  vin VARCHAR(17) REFERENCES vehicle_permanent.vehicles(vin),
  log_date DATE NOT NULL,
  amount_liters DECIMAL(5,2),
  odometer_reading INTEGER,
  consumption_per_100km DECIMAL(4,2),
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Personal Encrypted Schema
CREATE SCHEMA personal_encrypted;

CREATE TABLE personal_encrypted.user_profiles (
  user_id UUID PRIMARY KEY,
  encrypted_name TEXT, -- AES-256 encrypted
  email VARCHAR(255), -- Hashed
  created_at TIMESTAMPTZ DEFAULT NOW(),
  retention_until TIMESTAMPTZ -- GDPR deletion date
);

CREATE TABLE personal_encrypted.vehicle_ownership (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES personal_encrypted.user_profiles(user_id),
  vin VARCHAR(17) REFERENCES vehicle_permanent.vehicles(vin),
  ownership_start DATE,
  ownership_end DATE,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

CREATE TABLE personal_encrypted.payment_records (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES personal_encrypted.user_profiles(user_id),
  fuel_log_id UUID REFERENCES vehicle_permanent.fuel_logs(id),
  encrypted_cost TEXT, -- AES-256 encrypted
  encrypted_payment_method TEXT, -- AES-256 encrypted
  created_at TIMESTAMPTZ DEFAULT NOW()
);
```

### Row Level Security (RLS)

```sql
-- Exempel på RLS policies
ALTER TABLE vehicle_permanent.vehicles ENABLE ROW LEVEL SECURITY;

-- Alla kan läsa fordonsdata (är anonymt)
CREATE POLICY "Allow public read on vehicles" ON vehicle_permanent.vehicles
  FOR SELECT USING (true);

-- Endast ägarkedjans medlemmar kan skriva
CREATE POLICY "Allow ownership chain write" ON vehicle_permanent.vehicles
  FOR INSERT WITH CHECK (
    EXISTS (
      SELECT 1 FROM personal_encrypted.vehicle_ownership
      WHERE vin = vehicles.vin
      AND user_id = auth.uid()
      AND ownership_end IS NULL
    )
  );

-- Persondata kan endast läsas av ägaren
CREATE POLICY "Users can only read own data" ON personal_encrypted.user_profiles
  FOR SELECT USING (user_id = auth.uid());
```

---

## 🧪 Testing Strategy

### Unit Tests (ska implementeras)

```typescript
// Maskerings-utilities
describe('Privacy Masking', () => {
  it('should mask VIN correctly in masked mode', () => {
    const vin = 'WBA2D3107G5C64424';
    const masked = maskVIN(vin, 'masked');
    expect(masked).toBe('WBA***********4424');
  });
  
  it('should show full VIN in full mode', () => {
    const vin = 'WBA2D3107G5C64424';
    const full = maskVIN(vin, 'full');
    expect(full).toBe(vin);
  });
});

// Data separation
describe('Data Separation', () => {
  it('should correctly separate vehicle and personal data from receipt', () => {
    const receipt = mockReceiptData;
    const { vehicleData, personalData } = separateReceiptData(receipt);
    
    expect(vehicleData).toHaveProperty('amount');
    expect(vehicleData).toHaveProperty('date');
    expect(vehicleData).not.toHaveProperty('cost');
    
    expect(personalData).toHaveProperty('cost');
    expect(personalData).not.toHaveProperty('amount');
  });
});
```

### Integration Tests

```typescript
// API integration
describe('Vehicle Data API', () => {
  it('should fetch vehicle data without personal info', async () => {
    const response = await fetch('/api/vehicles/WBA2D3107G5C64424');
    const data = await response.json();
    
    expect(data).toHaveProperty('fuelHistory');
    expect(data).not.toHaveProperty('ownerName');
    expect(data).not.toHaveProperty('payments');
  });
});
```

### E2E Tests med Playwright

```typescript
test('Privacy mode switching', async ({ page }) => {
  await page.goto('/dashboard');
  
  // Verify default masked mode
  await expect(page.locator('[data-testid="vin"]')).toContainText('***');
  
  // Switch to full mode
  await page.click('[data-testid="privacy-full-button"]');
  
  // Verify full VIN shown
  await expect(page.locator('[data-testid="vin"]')).toContainText('WBA2D3107G5C64424');
});
```

---

## 🚀 Deployment och Environment

### Environment Variables

```bash
# .env.local
NEXT_PUBLIC_SUPABASE_URL=https://your-project.supabase.co
NEXT_PUBLIC_SUPABASE_ANON_KEY=your-anon-key
SUPABASE_SERVICE_ROLE_KEY=your-service-role-key

# Encryption keys (NEVER commit to repo)
ENCRYPTION_KEY_PERSONAL=your-256-bit-key
ENCRYPTION_KEY_PAYMENTS=your-256-bit-key

# OCR Service (Azure Computer Vision EU)
AZURE_CV_ENDPOINT=https://your-region.api.cognitive.microsoft.com/
AZURE_CV_KEY=your-key

# Feature flags
NEXT_PUBLIC_ENABLE_PRIVACY_FULL_MODE=true
NEXT_PUBLIC_ENABLE_GDPR_EXPORT=true
```

### Security Checklist

- [ ] Alla environment variables konfigurerade
- [ ] Encryption keys genererade och säkrade (använd KMS)
- [ ] Supabase RLS policies aktiverade
- [ ] HTTPS/TLS enforced
- [ ] Rate limiting implementerad
- [ ] Audit logging aktiverad
- [ ] CORS policies konfigurerade
- [ ] CSP headers satta

---

## 📈 Performance Considerations

### Optimeringar implementerade

1. **Lazy Loading**: Komponenter laddar endast när de behövs
2. **Memoization**: `useMemo` för tunga beräkningar
3. **Virtual Scrolling**: För långa fuel history tables (ska implementeras)

### Framtida optimeringar

```typescript
// Code splitting för olika views
const FuelHistoryView = lazy(() => import('./views/FuelHistoryView'));
const AnalyticsView = lazy(() => import('./views/AnalyticsView'));

// Service Worker för offline-support
if ('serviceWorker' in navigator) {
  navigator.serviceWorker.register('/sw.js');
}

// IndexedDB för lokal caching av fordonsdata
const db = await openDB('caizen-cache', 1, {
  upgrade(db) {
    db.createObjectStore('vehicles', { keyPath: 'vin' });
  }
});
```

---

## 🐛 Kända Problem och TODO

### Current Issues

1. **Privacy Mode Persistence**
   - Problem: Privacy mode resetas vid page refresh
   - Lösning: Spara i localStorage eller user preferences

2. **GDPR Modal Accessibility**
   - Problem: Saknar keyboard navigation
   - Lösning: Implementera focus trap och ESC-key handling

3. **Mobile Navigation**
   - Problem: Scroll performance på långa listor
   - Lösning: Implementera virtual scrolling med react-window

### TODO (Prioriterat)

**Högt prioritet:**
- [ ] Implementera backend API integration
- [ ] Lägg till autentisering (Supabase Auth)
- [ ] Implementera OCR-pipeline för receipt processing
- [ ] Skapa GDPR export functionality
- [ ] Audit logging för privacy mode changes

**Medel prioritet:**
- [ ] Lägg till fler charts (Recharts integration)
- [ ] Implementera trip analysis view
- [ ] Skapa marketplace integration
- [ ] Lägg till notifications system

**Lågt prioritet:**
- [ ] Dark/Light mode toggle
- [ ] Internationalisering (i18n)
- [ ] PWA support
- [ ] Offline mode

---

## 📚 Viktiga Resurser

### Dokumentation

- **Projektinstruktioner**: `Projektinstruktioner för CaiZen v2.0 - Privacy-First Utveckling.md`
- **PRD**: `Caizen Product Requirements Document (PRD) v2.0 - Fordonscentrerad Arkitektur.md`
- **Komponentdokumentation**: `CaiZen Komponentdokumentation v2.0 - Privacy-First Komponenter.md`
- **Utvecklingssammanfattning**: `CaiZen Utvecklingssammanfattning v2.0 - Fordonscentrerad Arkitektur.md`

### Externa Tjänster

- **Supabase**: https://supabase.com/docs
- **TailwindCSS**: https://tailwindcss.com/docs
- **Lucide Icons**: https://lucide.dev
- **Azure Computer Vision**: https://learn.microsoft.com/en-us/azure/ai-services/computer-vision/

### Compliance

- **GDPR**: https://gdpr.eu
- **ISO 27001**: https://www.iso.org/isoiec-27001-information-security.html
- **Dataskyddsmyndigheten**: https://www.imy.se

---

## 🤝 Kontakt och Support

### Föregående Utvecklare
- **Namn**: [Ditt namn]
- **Email**: [Din email]
- **Tillgänglig för frågor**: [Tidsperiod]

### Code Repository
- **GitHub**: [Repository URL]
- **Branch**: `main` (production), `develop` (development)
- **CI/CD**: [Pipeline info]

### Slack/Discord Channels
- **#caizen-dev**: Utvecklingsdiskussioner
- **#caizen-privacy**: Privacy-relaterade frågor
- **#caizen-support**: Support och buggar

---

## 🎓 Onboarding Checklist

För nästa utvecklare:

**Dag 1:**
- [ ] Klona repository och kör `npm install`
- [ ] Läs denna handover-dokumentation helt
- [ ] Sätt upp development environment
- [ ] Kör prototypen lokalt

**Vecka 1:**
- [ ] Läs alla relevanta dokument i projektkunskapen
- [ ] Granska nuvarande codebase
- [ ] Förstå datamodellen (vehicle vs personal)
- [ ] Testa privacy modes och maskering

**Vecka 2:**
- [ ] Implementera första backend-integration
- [ ] Sätt upp Supabase projekt
- [ ] Skapa första API endpoint
- [ ] Testa med riktigt data

**Månad 1:**
- [ ] Komplett vehicle data flow
- [ ] OCR-pipeline implementation
- [ ] GDPR compliance verification
- [ ] Production deployment

---

## 💡 Designfilosofi - Sammanfattning

Kom ihåg dessa kärnprinciper när du utvecklar vidare:

1. **Privacy by Design**: Separation av person- och fordonsdata från början
2. **Fordonscentrerat**: VIN är king, användare är custodians
3. **GDPR som feature**: Inte en börda, utan en konkurrensfördel
4. **Transparent men diskret**: Säkerhet ska kännas naturlig
5. **Verksamhet utan att synas**: Användaren ska förstå men inte bli distraherad

---

*Dokument skapad: 2025-05-30*
*Senast uppdaterad: 2025-05-30*
*Version: 2.0*

**Lycka till med utvecklingen! 🚀**