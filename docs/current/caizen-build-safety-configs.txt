# ============================================
# CaiZen Build Safety Configuration
# Version: 2.0
# Datum: 2025-05-30
# ============================================

# -----------------------------------------
# .eslintignore
# -----------------------------------------
# ESLint ska INTE k√∂ras p√• dessa filer/mappar

# Documentation (aldrig linta markdown/HTML)
docs/**
*.md

# Legacy kod (ska inte p√•verka linting)
src/components/legacy/**

# Build outputs
dist/
build/
.next/
out/

# Dependencies
node_modules/

# Cache
.eslintcache
.cache/

# -----------------------------------------
# .prettierignore
# -----------------------------------------
# Prettier ska INTE formatera dessa filer

# Legacy dokumentation
docs/legacy/**

# Build outputs
dist/
build/
.next/
out/

# Dependencies
node_modules/

# Lock files
package-lock.json
yarn.lock
pnpm-lock.yaml

# -----------------------------------------
# package.json scripts (uppdaterade)
# -----------------------------------------
{
  "scripts": {
    "lint": "eslint 'src/**/*.{js,ts,jsx,tsx}' --max-warnings=0",
    "lint:fix": "eslint 'src/**/*.{js,ts,jsx,tsx}' --fix",
    "type-check": "tsc --noEmit --project tsconfig.json",
    "format": "prettier --write 'src/**/*.{js,ts,jsx,tsx}' 'docs/current/**/*.md'",
    "format:check": "prettier --check 'src/**/*.{js,ts,jsx,tsx}'",
    "test": "vitest run --config vitest.config.ts",
    "test:watch": "vitest --config vitest.config.ts",
    "test:coverage": "vitest run --coverage"
  }
}

# -----------------------------------------
# tsconfig.json (s√§kerst√§ll korrekt scope)
# -----------------------------------------
{
  "compilerOptions": {
    "target": "ES2020",
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "jsx": "react-jsx",
    "module": "ESNext",
    "moduleResolution": "bundler",
    "strict": true,
    "skipLibCheck": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "forceConsistentCasingInFileNames": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true
  },
  "include": [
    "src/**/*"
  ],
  "exclude": [
    "node_modules",
    "dist",
    "build",
    "docs",
    "src/components/legacy"
  ]
}

# -----------------------------------------
# vitest.config.ts
# -----------------------------------------
import { defineConfig } from 'vitest/config';
import react from '@vitejs/plugin-react';

export default defineConfig({
  plugins: [react()],
  test: {
    globals: true,
    environment: 'jsdom',
    setupFiles: './src/test/setup.ts',
    include: [
      'src/**/__tests__/**/*.{test,spec}.{js,ts,jsx,tsx}',
      'tests/**/*.{test,spec}.{js,ts,jsx,tsx}'
    ],
    exclude: [
      'node_modules',
      'dist',
      'build',
      'docs',
      'src/components/legacy/**'
    ],
    coverage: {
      provider: 'v8',
      reporter: ['text', 'json', 'html'],
      exclude: [
        'node_modules/',
        'src/test/',
        'src/components/legacy/',
        '**/*.d.ts',
        '**/*.config.*',
        '**/mockData/*',
        'tests/fixtures/'
      ]
    }
  }
});

# -----------------------------------------
# tailwind.config.js
# -----------------------------------------
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
    // Explicit exclusion (f√∂r tydlighet, men globen hittar √§nd√• inte docs/)
    "!./src/components/legacy/**",
    "!./docs/**"
  ],
  theme: {
    extend: {
      colors: {
        'caizen-blue': '#0066B1',
        'caizen-orange': '#FF7700',
        'caizen-purple': '#6F2B90',
        'caizen-red': '#FF0000',
        'caizen-dark': '#222222',
        'privacy-personal': '#ef4444',
        'privacy-vehicle': '#22c55e',
        'privacy-mixed': '#eab308',
      }
    }
  },
  plugins: []
};

# -----------------------------------------
# .husky/pre-commit (uppdaterad hook)
# -----------------------------------------
#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

echo "üîç Running pre-commit checks..."

# 1. Lint staged files (endast fr√•n src/)
echo "üìù Linting staged files..."
npx lint-staged

# 2. Type check
echo "üîç Type checking..."
npm run type-check

# 3. Scan f√∂r k√§nslig data (exkludera legacy docs)
echo "üîê Scanning for sensitive data..."
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM)

# Exkludera docs/legacy/** fr√•n sensitive data scan
FILTERED_FILES=$(echo "$STAGED_FILES" | grep -v "^docs/legacy/" | grep -v "^node_modules/")

if [ -n "$FILTERED_FILES" ]; then
  # Scan f√∂r VIN-nummer (ej maskerade)
  if echo "$FILTERED_FILES" | xargs grep -l "WBA[0-9A-Z]\{14\}" 2>/dev/null; then
    echo "‚ö†Ô∏è  Warning: Unmakserat VIN-nummer hittades!"
    echo "Granska filen och maskera om n√∂dv√§ndigt."
    exit 1
  fi
  
  # Scan f√∂r personnummer
  if echo "$FILTERED_FILES" | xargs grep -l "[0-9]\{6\}-[0-9]\{4\}" 2>/dev/null; then
    echo "‚ö†Ô∏è  Warning: M√∂jligt personnummer hittades!"
    echo "Granska filen innan commit."
    exit 1
  fi
  
  # Scan f√∂r API-nycklar (enkel pattern)
  if echo "$FILTERED_FILES" | xargs grep -l "api[_-]key.*=.*['\"][a-zA-Z0-9]\{20,\}" 2>/dev/null; then
    echo "‚ö†Ô∏è  Warning: M√∂jlig API-nyckel hittades!"
    echo "Anv√§nd environment variables ist√§llet."
    exit 1
  fi
fi

echo "‚úÖ Pre-commit checks passed!"

# -----------------------------------------
# .husky/lint-staged.config.js
# -----------------------------------------
module.exports = {
  // Endast linta TypeScript/JavaScript fr√•n src/
  'src/**/*.{js,ts,jsx,tsx}': [
    'eslint --fix --max-warnings=0',
    'prettier --write'
  ],
  
  // Formatera markdown (men inte i legacy/)
  'docs/current/**/*.md': [
    'prettier --write'
  ],
  
  // Formatera JSON/YAML
  '*.{json,yml,yaml}': [
    'prettier --write'
  ]
};

# -----------------------------------------
# .github/workflows/ci.yml (CI pipeline)
# -----------------------------------------
name: CI Pipeline

on:
  push:
    branches: [main, develop]
    paths:
      - 'src/**'
      - 'tests/**'
      - 'package.json'
      - 'tsconfig.json'
  pull_request:
    branches: [main, develop]
    paths:
      - 'src/**'
      - 'tests/**'
      - 'package.json'
      - 'tsconfig.json'

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - run: npm ci
      - name: Run ESLint
        run: npm run lint
      - name: Check formatting
        run: npm run format:check

  typecheck:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - run: npm ci
      - name: TypeScript check
        run: npm run type-check

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - run: npm ci
      - name: Run tests
        run: npm run test:coverage
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/coverage-final.json

# -----------------------------------------
# src/components/index.ts (SAFE exports)
# -----------------------------------------
// ‚ö†Ô∏è VIKTIGT: Importera ENDAST fr√•n v2.0/
// Legacy-komponenter ska ALDRIG exporteras h√§r

// v2.0 Privacy-First Components
export { default as CaizenV2Dashboard } from './v2.0/CaizenV2Dashboard';
export { default as PrivacyBadge } from './v2.0/PrivacyComponents/PrivacyBadge';
export { default as VehicleIdentityCard } from './v2.0/VehicleIdentityCard';
export { default as FuelHistoryTable } from './v2.0/FuelHistoryTable';

// Utils
export * from './v2.0/utils/privacyMasking';
export * from './v2.0/utils/dataValidation';

// Types
export type { VehicleData, PersonalData, PrivacyMode } from './v2.0/types';

// ‚ùå ALDRIG importera fr√•n legacy:
// export * from './legacy/...';  // F√ñRBJUDET!

# -----------------------------------------
# docs/README.md
# -----------------------------------------
# CaiZen Documentation Structure

## üìÇ Mapp√∂versikt

### `/current/` - Aktuell Dokumentation
Inneh√•ller all giltig, uppdaterad dokumentation f√∂r v2.0:
- PRD (Product Requirements Document)
- Projektinstruktioner
- Komponentdokumentation
- Developer Handover

**Regel:** Endast v2.0-dokument ska finnas h√§r.

### `/legacy/` - Historisk Dokumentation
Arkiverade dokument fr√•n tidigare versioner:
- `/v0.1.0/` - Initial prototyper (2025-04-17)
- `/v1.0/` - Pre-privacy-first arkitektur

**Regel:** Dessa dokument √§r f√∂r historiskt sammanhang. 
**VARNING:** Legacy-kod f√•r ALDRIG importeras i build.

### `/sessions/` - Utvecklingssessioner
Sammanfattningar fr√•n utvecklingsm√∂ten och chattsessioner:
- Dagliga utvecklingsloggar
- Beslutsdokumentation
- Tekniska diskussioner

**Regel:** Kronologisk ordning, en fil per session.

## üîí S√§kerhet

Legacy-dokumentation kan inneh√•lla omaskerad data fr√•n tidiga prototyper.
**Dessa filer:**
- Laddas INTE av build-verktyg
- Lintas INTE av ESLint
- Testas INTE av Vitest
- Inkluderas INTE i TypeScript compilation

Se `.eslintignore`, `tsconfig.json` och `vitest.config.ts` f√∂r konfiguration.

## üè∑Ô∏è Versionshantering

Dokumentnamn ska f√∂lja konventionen:
- `[DOKUMENT-NAMN]-v[VERSION].md` - Aktuella dokument
- `[ARKIV-v1.0] [DOKUMENT-NAMN].md` - Arkiverade dokument

Exempel:
- ‚úÖ `PRD-v2.0.md`
- ‚úÖ `[ARKIV-v0.1.0] Komponentdokumentation.md`
- ‚ùå `Uppdaterad-Dokumentation.md` (vag namngivning)

## üìù Underh√•ll

Vid nya versioner:
1. Flytta gamla dokument till `/legacy/v[X.Y.Z]/`
2. Uppdatera denna README
3. Tagga i Git: `git tag docs-v2.0`

---
*Senast uppdaterad: 2025-05-30*

# -----------------------------------------
# CHECKLISTA: Implementation
# -----------------------------------------

‚úÖ Skapa `.eslintignore`
‚úÖ Skapa `.prettierignore`
‚úÖ Uppdatera `package.json` scripts
‚úÖ Verifiera `tsconfig.json` excludes
‚úÖ Skapa/uppdatera `vitest.config.ts`
‚úÖ Uppdatera `tailwind.config.js`
‚úÖ Uppdatera `.husky/pre-commit`
‚úÖ Skapa `lint-staged.config.js`
‚úÖ Skapa `.github/workflows/ci.yml`
‚úÖ S√§kra `src/components/index.ts`
‚úÖ Skapa `docs/README.md`

# -----------------------------------------
# VERIFIERING
# -----------------------------------------

# Testa att legacy INTE lintas:
npm run lint  # Ska INTE ge fel fr√•n legacy/

# Testa att TypeScript INTE kompilerar legacy:
npm run type-check  # Ska INTE kolla legacy/

# Testa att tests INTE k√∂r p√• legacy:
npm test  # Ska INTE k√∂ra tests i legacy/

# Testa pre-commit hook:
git add .
git commit -m "test"  # Ska genomf√∂ra alla checks

# Verifiera att Tailwind INTE processar legacy:
npm run build  # Ska INTE inkludera CSS fr√•n legacy/

# -----------------------------------------
# FRAMTIDA SKYDD
# -----------------------------------------

# Om ni l√§gger till nya tools (Biome, Oxc, etc):
# - L√§gg till motsvarande ignore-filer
# - Uppdatera CI pipeline
# - Dokumentera i denna fil